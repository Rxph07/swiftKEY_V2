<Window x:Class="swiftKEY_V2.HotkeySettingsWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:swiftKEY_V2"
        mc:Ignorable="d"
        Title="HotkeySettings" Height="450" Width="800"
        xmlns:theme="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2">

    <Window.Resources>
        <!-- #region Custom Colors -->
        <Color x:Key="custom_darkgray">#1C1C1C</Color>
        <Color x:Key="custom_gray">#2C2C2C</Color>
        <Color x:Key="custom_lightgray_1">#3C3C3C</Color>
        <Color x:Key="custom_lightgray_2">#4C4C4C</Color>
        <Color x:Key="custom_lightgray_3">#6D6D6D</Color>
        <Color x:Key="custom_gray_text">#707070</Color>

        <SolidColorBrush x:Key="custom_darkgray_brush" Color="{StaticResource custom_darkgray}"/>
        <SolidColorBrush x:Key="custom_gray_brush" Color="{StaticResource custom_gray}"/>
        <SolidColorBrush x:Key="custom_lightgray_1_brush" Color="{StaticResource custom_lightgray_1}"/>
        <SolidColorBrush x:Key="custom_lightgray_2_brush" Color="{StaticResource custom_lightgray_2}"/>
        <SolidColorBrush x:Key="custom_lightgray_3_brush" Color="{StaticResource custom_lightgray_3}"/>
        <SolidColorBrush x:Key="custom_gray_text_brush" Color="{StaticResource custom_gray_text}"/>
        <!--#endregion-->
        <!-- #region Custom ComboBox -->
        <!-- ComboBox DropDown Style -->
        <Style x:Key="ComboBoxItemStyle" TargetType="ComboBoxItem">
            <Setter Property="Background" Value="{StaticResource custom_lightgray_1_brush}"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="FontSize" Value="16"/>
            <Setter Property="FontWeight" Value="SemiBold"/>
            <Setter Property="Height" Value="30"/>
        </Style>

        <!-- Custom ComboBox Style -->
        <SolidColorBrush x:Key="ComboBox.Static.Background" Color="{StaticResource custom_lightgray_1}"/>
        <SolidColorBrush x:Key="ComboBox.Static.Border" Color="Transparent"/>
        <SolidColorBrush x:Key="ComboBox.Static.Glyph" Color="{StaticResource custom_gray_text}"/>
        <SolidColorBrush x:Key="ComboBox.MouseOver.Background" Color="{StaticResource custom_lightgray_2}"/>
        <SolidColorBrush x:Key="ComboBox.MouseOver.Border" Color="Transparent"/>
        <SolidColorBrush x:Key="ComboBox.MouseOver.Glyph" Color="{StaticResource custom_gray_text}"/>
        <SolidColorBrush x:Key="ComboBox.Pressed.Background" Color="{StaticResource custom_lightgray_2}"/>
        <SolidColorBrush x:Key="ComboBox.Pressed.Border" Color="Transparent"/>
        <SolidColorBrush x:Key="ComboBox.Pressed.Glyph" Color="{StaticResource custom_gray_text}"/>
        <SolidColorBrush x:Key="ComboBox.Disabled.Background" Color="{StaticResource custom_lightgray_3}"/>
        <SolidColorBrush x:Key="ComboBox.Disabled.Border" Color="Transparent"/>
        <SolidColorBrush x:Key="ComboBox.Disabled.Glyph" Color="{StaticResource custom_gray_text}"/>

        <!-- ComboBox Toggle Button Style -->
        <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="Focusable" Value="false"/>
            <Setter Property="ClickMode" Value="Press"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <!-- arrow icon + transition -->
                        <Border x:Name="templateRoot" Background="{StaticResource ComboBox.Static.Background}" BorderBrush="{StaticResource ComboBox.Static.Border}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true" CornerRadius="5">
                            <Border x:Name="splitBorder" BorderBrush="Transparent" BorderThickness="1" Margin="170,0,0,0" SnapsToDevicePixels="true" Width="30" HorizontalAlignment="Left">
                                <Path x:Name="arrow" Width="15" Height="10" Fill="{StaticResource ComboBox.Static.Glyph}" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M0,0 L4,4 L8,0 Z" Stretch="Fill">
                                    <Path.RenderTransformOrigin>
                                        <Point X="0.5" Y="0.5"/>
                                    </Path.RenderTransformOrigin>
                                    <Path.Style>
                                        <Style TargetType="Path">
                                            <Setter Property="RenderTransform">
                                                <Setter.Value>
                                                    <RotateTransform Angle="0"/>
                                                </Setter.Value>
                                            </Setter>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding IsDropDownOpen, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="True">
                                                    <DataTrigger.EnterActions>
                                                        <BeginStoryboard>
                                                            <Storyboard>
                                                                <DoubleAnimation Storyboard.TargetProperty="RenderTransform.Angle" To="180" Duration="0:0:0.1"/>
                                                            </Storyboard>
                                                        </BeginStoryboard>
                                                    </DataTrigger.EnterActions>
                                                    <DataTrigger.ExitActions>
                                                        <BeginStoryboard>
                                                            <Storyboard>
                                                                <DoubleAnimation Storyboard.TargetProperty="RenderTransform.Angle" To="0" Duration="0:0:0.1"/>
                                                            </Storyboard>
                                                        </BeginStoryboard>
                                                    </DataTrigger.ExitActions>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Path.Style>
                                </Path>
                            </Border>
                        </Border>
                        <ControlTemplate.Triggers>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=Self}}" Value="true"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Background}"/>
                            </MultiDataTrigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.Pressed.Glyph}"/>
                            </Trigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Mode=Self}}" Value="true"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Background}"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Mode=Self}}" Value="true"/>
                                </MultiDataTrigger.Conditions>
                            </MultiDataTrigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.Disabled.Glyph}"/>
                            </Trigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Mode=Self}}" Value="false"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Background}"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Mode=Self}}" Value="false"/>
                                </MultiDataTrigger.Conditions>
                            </MultiDataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
        <!-- combo Box Scrollbar style -->
        <ControlTemplate x:Key="CustomComboBoxScrollViewerTemplate" TargetType="{x:Type ScrollViewer}">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <ScrollContentPresenter Grid.Row="0" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}"/>
            </Grid>
        </ControlTemplate>

        <!-- basic control template -->
        <ControlTemplate x:Key="ComboBoxTemplate" TargetType="{x:Type ComboBox}">
            <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                </Grid.ColumnDefinitions>

                <!-- textblock for place holder text -->
                <TextBlock x:Name="placeHolderTextBlock"
                   Text="Test"
                   Visibility="Collapsed"
                   VerticalAlignment="Center"
                   HorizontalAlignment="Left"
                   TextTrimming="CharacterEllipsis"
                   Foreground="{StaticResource custom_gray_text_brush}"
                   Margin="5, 0, 5, 0"
                   Grid.ColumnSpan="2"
                   IsHitTestVisible="true"
                   Panel.ZIndex="1"/>
                <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource Mode=TemplatedParent}}" Margin="1" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                    <theme:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MinWidth="{Binding ActualWidth, ElementName=templateRoot}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                        <Border x:Name="dropDownBorder" Background="{StaticResource custom_lightgray_1_brush}" BorderBrush="{StaticResource custom_gray_text_brush}" BorderThickness="0, 1, 0, 0">
                            <ScrollViewer x:Name="DropDownScrollViewer" Template="{StaticResource CustomComboBoxScrollViewerTemplate}">
                                <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                    <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                        <Rectangle x:Name="opaqueRect" Fill="{StaticResource custom_darkgray_brush}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                    </Canvas>
                                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </Grid>
                            </ScrollViewer>
                        </Border>
                    </theme:SystemDropShadowChrome>
                </Popup>
                <ToggleButton x:Name="toggleButton" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource Mode=TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}"/>
                <ContentPresenter x:Name="contentPresenter" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" Content="{TemplateBinding SelectionBoxItem}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </Grid>
            <ControlTemplate.Triggers>
                <!-- show only when no item is selected -->
                <Trigger Property="SelectedIndex" Value="-1">
                    <Setter Property="Visibility" TargetName="placeHolderTextBlock" Value="Visible"/>
                </Trigger>
                <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                    <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                    <Setter Property="Color" TargetName="shadow" Value="#71000000"/>
                </Trigger>
                <Trigger Property="HasItems" Value="false">
                    <Setter Property="Height" TargetName="dropDownBorder" Value="Auto"/>
                </Trigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsGrouping" Value="true"/>
                        <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                </MultiTrigger>
                <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                    <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                    <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <!-- basic control template -->
        <ControlTemplate x:Key="ButtonComboBoxTemplate" TargetType="{x:Type ComboBox}">
            <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                </Grid.ColumnDefinitions>

                <Button x:Name="btn_chooseHotkey"
                        Content="Hotkey wählen..."
                        Visibility="Visible"
                        VerticalAlignment="Stretch"
                        HorizontalAlignment="Stretch"
                        Background="{StaticResource custom_lightgray_1_brush}"
                        Foreground="{StaticResource custom_gray_text_brush}"
                        Margin="0, 0, 30, 0"
                        Grid.ColumnSpan="2"
                        IsHitTestVisible="true"
                        Panel.ZIndex="1"
                        Click="ChooseHotkey_Click"
                        FontSize="16"
                        FontWeight="SemiBold"
                        BorderThickness="0">
                    <Button.Template>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border x:Name="border"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="border" Property="Background" Value="{StaticResource custom_lightgray_2_brush}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="border" Property="Background" Value="{StaticResource custom_lightgray_3_brush}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Button.Template>
                </Button>

                <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource Mode=TemplatedParent}}" Margin="1" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                    <theme:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MinWidth="{Binding ActualWidth, ElementName=templateRoot}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                        <Border x:Name="dropDownBorder" Background="{StaticResource custom_lightgray_1_brush}" BorderBrush="{StaticResource custom_gray_text_brush}" BorderThickness="0, 1, 0, 0">
                            <ScrollViewer x:Name="DropDownScrollViewer" Template="{StaticResource CustomComboBoxScrollViewerTemplate}">
                                <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                    <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                        <Rectangle x:Name="opaqueRect" Fill="{StaticResource custom_darkgray_brush}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                    </Canvas>
                                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </Grid>
                            </ScrollViewer>
                        </Border>
                    </theme:SystemDropShadowChrome>
                </Popup>
                <ToggleButton x:Name="toggleButton" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource Mode=TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}"/>
                <ContentPresenter x:Name="contentPresenter" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" Content="{TemplateBinding SelectionBoxItem}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </Grid>
            <ControlTemplate.Triggers>
                <!-- show only when no item is selected -->
                <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                    <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                    <Setter Property="Color" TargetName="shadow" Value="#71000000"/>
                </Trigger>
                <Trigger Property="HasItems" Value="false">
                    <Setter Property="Height" TargetName="dropDownBorder" Value="Auto"/>
                </Trigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsGrouping" Value="true"/>
                        <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                </MultiTrigger>
                <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                    <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                    <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <!-- Custom ComboBox Style -->
        <Style x:Key="Custom_ComboBoxStyle" TargetType="{x:Type ComboBox}">
            <Setter Property="Background" Value="{StaticResource ComboBox.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource ComboBox.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
            <Setter Property="Padding" Value="6,3,5,3"/>
            <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
            <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Template" Value="{StaticResource ComboBoxTemplate}"/>
            <Style.Triggers>
                <Trigger Property="IsEditable" Value="true">
                    <Setter Property="IsTabStop" Value="false"/>
                    <Setter Property="Padding" Value="2"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <!--#endregion-->
        <!-- #region Custom TextBox -->
        <ControlTemplate x:Key="TextBoxTemplate" TargetType="{x:Type TextBox}">
            <Border x:Name="border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="0">
                <ScrollViewer x:Name="PART_ContentHost" Focusable="false"/>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                    <Setter TargetName="PART_ContentHost" Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <!-- #endregion -->
        <!-- #region Button Template -->
        <ControlTemplate x:Key="ButtonTemplate" TargetType="{x:Type Button}">
            <Border x:Name="border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="5">
                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter TargetName="border" Property="Background" Value="{StaticResource custom_lightgray_2_brush}"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter TargetName="border" Property="Background" Value="{StaticResource custom_lightgray_3_brush}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <!-- #endregion -->
    </Window.Resources>

    <Window.Background>
        <SolidColorBrush Color="{StaticResource custom_gray}"/>
    </Window.Background>

    <Border BorderBrush="{StaticResource custom_darkgray_brush}" BorderThickness="1">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>

            <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
                <StackPanel Grid.Row="0" Orientation="Horizontal" Margin="10">
                    <Label Content="Anzeigename:" VerticalAlignment="Center" Margin="0,0,30,0" FontSize="16" FontWeight="SemiBold"
                           Foreground="{StaticResource custom_gray_text_brush}"/>
                    <TextBox x:Name="txt_ButtonName"
                             Width="200" Height="30"
                             Margin="0,0,10,0" 
                             Background="{StaticResource custom_lightgray_1_brush}"
                             Foreground="{StaticResource custom_gray_text_brush}"
                             FontSize="16" FontWeight="SemiBold"
                             VerticalContentAlignment="Center"
                             BorderThickness="0"
                             Template="{StaticResource TextBoxTemplate}"
                             TextChanged="ButtonName_TextChanged"/>
                </StackPanel>
                <StackPanel Grid.Row="0" Orientation="Horizontal" Margin="10">
                    <Label Content="Hotkey wählen:" Margin="0,0,21,0" FontSize="16" FontWeight="SemiBold"
                           Foreground="{StaticResource custom_gray_text_brush}"/>
                    <ComboBox Style="{DynamicResource Custom_ComboBoxStyle}"
                              x:Name="cb_chooseHotkey"
                              HorizontalAlignment="Left"
                              VerticalAlignment="Top"
                              Width="200" Height="30"
                              ItemContainerStyle="{StaticResource ComboBoxItemStyle}"
                              SelectedIndex="-1"
                              SelectionChanged="cb_chooseHotkey_SelectionChanged"
                              Foreground="{StaticResource custom_gray_text_brush}"
                              Template="{StaticResource ButtonComboBoxTemplate}">
                    </ComboBox>
                </StackPanel>
            </StackPanel>

            <StackPanel Grid.Row="1" Orientation="Horizontal" HorizontalAlignment="Right" Margin="10">
                <Button Content="Schließen" Click="CloseButton_Click" Width="100" Height="25" Margin="0"
                        FontSize="16" FontWeight="SemiBold"
                        Foreground="{StaticResource custom_gray_text_brush}"
                        Background="{StaticResource custom_lightgray_1_brush}"
                        Template="{StaticResource ButtonTemplate}"
                        BorderThickness="0"/>
            </StackPanel>
        </Grid>
    </Border>
</Window>
